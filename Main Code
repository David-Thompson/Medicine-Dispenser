import RPi.GPIO as GPIO
import time
import sys

#The large servo rotates 130 degrees.

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(10, GPIO.OUT)
GPIO.setup(12, GPIO.OUT)
GPIO.setup(16, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(22, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(24, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(26, GPIO.OUT, initial=GPIO.LOW)

pMain = GPIO.PWM(10, 50)
pTrap = GPIO.PWM(12, 50)

TimeSinceMidnight = 9 #Measured in hours.

Day1 = 0
Day2 = 0
Day3 = 0
Day4 = 0
Day5 = 0
Day6 = 0
Day7 = 0

pMain.start(3)
pMain.ChangeDutyCycle(0)
pMain.ChangeDutyCycle(3)
pTrap.start(11)
pTrap.ChangeDutyCycle(0)
pTrap.ChangeDutyCycle(11)
time.sleep(0.5)

#Sync internal clock here, determine hourly dispense time, enter email address.

while True: #Main loop.
  a = (((round(time.time(), 0)) - (TimeSinceMidnight*3600)) / 86400)
  a = round(a, 4)
  if (a.is_integer()):
    
    x = time.time() - 1538000000 + 86400 #1540699300 is a Sunday at midnight.
    while x > 86400:
      if x > 86400:
        x -= 86400
        Day1 += 1
      else:
        break
      if x > 86400:
        x -= 86400
        Day2 += 1
      else:
        break
      if x > 86400:
        x -= 86400
        Day3 += 1
      else:
        break
      if x > 86400:
        x -= 86400
        Day4 += 1
      else:
        break
      if x > 86400:
        x -= 86400
        Day5 += 1
      else:
        break
      if x > 86400:
        x -= 86400
        Day6 += 1
      else:
        break
      if x > 86400:
        x -= 86400
        Day7 += 1
      else:
        break
      
    if (Day1 > Day2):
      pMain.ChangeDutyCycle(4)
    elif (Day2 > Day3):
      pMain.ChangeDutyCycle(5)
    elif (Day3 > Day4):
      pMain.ChangeDutyCycle(6)
    elif (Day4 > Day5):
      pMain.ChangeDutyCycle(7)
    elif (Day5 > Day6):
      pMain.ChangeDutyCycle(8)
    elif (Day6 > Day7):
      pMain.ChangeDutyCycle(9)
    else:
      pMain.ChangeDutyCycle(10)
    time.sleep(1)
    
    Day1 = 0
    Day2 = 0
    Day3 = 0
    Day4 = 0
    Day5 = 0
    Day6 = 0
    Day7 = 0
    
    print("")
    print(time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime(time.time())))
    print("It's time to take your medicine.")
    
    #Email user that it's time to take the medicine here.
    
    while True:
      GPIO.output(22, GPIO.HIGH)
      button_state = GPIO.input(16)
      if button_state:
        break
      time.sleep(0.1)
      GPIO.output(22, GPIO.LOW)
      GPIO.output(24, GPIO.HIGH)
      button_state = GPIO.input(16)
      if button_state:
        break
      time.sleep(0.1)
      GPIO.output(24, GPIO.LOW)
      GPIO.output(26, GPIO.HIGH)
      button_state = GPIO.input(16)
      if button_state:
        break
      time.sleep(0.1)
      GPIO.output(26, GPIO.LOW)
    
    GPIO.output(22, GPIO.LOW)
    GPIO.output(24, GPIO.LOW)
    GPIO.output(26, GPIO.LOW)
    
    pTrap.ChangeDutyCycle(7)
    time.sleep(2)
    pTrap.ChangeDutyCycle(11)
    time.sleep(0.5)
    
    time.sleep(7) #Used to ensure the device sttempts to dispense only once per day.
    
    
    #Sync internal clock here.
    
    
  else:
    button_state2 = GPIO.input(18)
    if button_state2:
      pMain.ChangeDutyCycle(10)
    time.sleep(0.2)
    button_state2 = GPIO.input(18)
    if button_state2:
      pMain.ChangeDutyCycle(10)
    time.sleep(0.2)
    button_state2 = GPIO.input(18)
    if button_state2:
      pMain.ChangeDutyCycle(10)
    time.sleep(0.2)
    button_state2 = GPIO.input(18)
    if button_state2:
      pMain.ChangeDutyCycle(10)
    time.sleep(0.2)
    button_state2 = GPIO.input(18)
    if button_state2:
      pMain.ChangeDutyCycle(10)
    time.sleep(0.2) #End of main loop.
    
